import React, { useState } from "react";
import {
  Container,
  Box,
  Typography,
  Radio,
  RadioGroup,
  FormControlLabel,
  FormControl,
  Button,
  AppBar,
  Toolbar,
  Fade,
  Card,
  CardContent,
} from "@mui/material";
import { useSearchParams, useNavigate } from "react-router-dom";
import logoWithText from "../assets/logoWithText.svg";

const TestPage = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const category = searchParams.get("category");

  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState("");
  const [showFact, setShowFact] = useState(false);
  const [answeredQuestions, setAnsweredQuestions] = useState([]);

  // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ñ–∞–∫—Ç–∞–º–∏
  const questions = [
    {
      id: 1,
      text: "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
      image: "https://via.placeholder.com/300x150?text=–í–µ—Å–Ω–∞",
      options: [
        { id: "1", text: "–í–µ—Å–Ω–∞" },
        { id: "2", text: "–õ–µ—Ç–æ" },
        { id: "3", text: "–û—Å–µ–Ω—å" },
        { id: "4", text: "–ó–∏–º–∞" },
      ],
      fact: {
        text: "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –≤–µ—Å–Ω–æ–π –ª—é–¥–∏ —á–∞—â–µ –≤–ª—é–±–ª—è—é—Ç—Å—è? –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–æ—Ç–æ–Ω–∏–Ω–∞ –∏ –æ–∫—Å–∏—Ç–æ—Ü–∏–Ω–∞!",
        image: "https://via.placeholder.com/300x150?text=–§–∞–∫—Ç+–æ+–≤–µ—Å–Ω–µ",
      },
    },
    {
      id: 2,
      text: "–ö–∞–∫–æ–π –≤–∏–¥ –æ—Ç–¥—ã—Ö–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
      image: "https://via.placeholder.com/300x150?text=–ê–∫—Ç–∏–≤–Ω—ã–π+–æ—Ç–¥—ã—Ö",
      options: [
        { id: "1", text: "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö" },
        { id: "2", text: "–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö" },
        { id: "3", text: "–≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π —Ç—É—Ä–∏–∑–º" },
        { id: "4", text: "–°–ø–æ–∫–æ–π–Ω—ã–π –æ—Ç–¥—ã—Ö –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ" },
      ],
      fact: {
        text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞ 35%! –†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–∞–∫–∂–µ —É–ª—É—á—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞.",
        image: "https://via.placeholder.com/300x150?text=–§–∞–∫—Ç+–æ–±+–æ—Ç–¥—ã—Ö–µ",
      },
    },
    {
      id: 3,
      text: "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞ –æ—Ç–¥—ã—Ö?",
      options: [
        { id: "1", text: "–≠–∫–æ–Ω–æ–º–Ω—ã–π (–¥–æ 30 000 —Ä—É–±.)" },
        { id: "2", text: "–°—Ä–µ–¥–Ω–∏–π (30 000 - 70 000 —Ä—É–±.)" },
        { id: "3", text: "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (70 000 - 150 000 —Ä—É–±.)" },
        { id: "4", text: "–ü—Ä–µ–º–∏—É–º (–±–æ–ª–µ–µ 150 000 —Ä—É–±.)" },
      ],
      fact: {
        text: "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã? 78% –ª—é–¥–µ–π —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ –ª—É—á—à–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, –∞ –Ω–µ –æ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π. –í–ª–æ–∂–µ–Ω–∏—è –≤ –æ–ø—ã—Ç —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–æ—Å—è—Ç –±–æ–ª—å—à–µ —Å—á–∞—Å—Ç—å—è, —á–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏!",
        image: "https://via.placeholder.com/300x150?text=–§–∞–∫—Ç+–æ+–±—é–¥–∂–µ—Ç–µ",
      },
    },
  ];

  const currentQuestion = questions[currentQuestionIndex];
  const isLastQuestion = currentQuestionIndex === questions.length - 1;

  const handleAnswerChange = (event) => {
    setSelectedAnswer(event.target.value);
  };

  const handleAnswerSubmit = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç
    setAnsweredQuestions((prev) => [
      ...prev,
      {
        questionId: currentQuestion.id,
        answer: selectedAnswer,
      },
    ]);
    setShowFact(true);
  };

  const handleNext = () => {
    if (showFact) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
      setShowFact(false);
      setSelectedAnswer("");

      if (isLastQuestion) {
        navigate("/results", {
          state: {
            category,
            answers: answeredQuestions,
          },
        });
      } else {
        setCurrentQuestionIndex((prev) => prev + 1);
      }
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
      handleAnswerSubmit();
    }
  };

  return (
    <Box
      sx={{ flexGrow: 1, color: "white", padding: "16px", minHeight: "100vh" }}
    >
      {/* –®–∞–ø–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ —Å—á–µ—Ç—á–∏–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤ */}
      <AppBar
        position="static"
        elevation={0}
        sx={{
          backgroundColor: "transparent",
          color: "text.primary",
          py: 2,
        }}
      >
        <Toolbar>
          <Box sx={{ flexGrow: 1 }}>
            <img
              src={logoWithText}
              alt="–ö—É—Ä–æ—Ä—Ç"
              style={{ width: "180px", height: "auto" }}
            />
          </Box>
          <Typography
            variant="body1"
            sx={{ fontWeight: "bold", color: "white" }}
          >
            {currentQuestionIndex + 1} / {questions.length}
          </Typography>
        </Toolbar>
      </AppBar>

      <Container maxWidth="md" sx={{ py: 4 }}>
        {!showFact ? (
          // –í–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
          <Fade in={!showFact} timeout={500}>
            <Box>
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞ */}
              <Typography
                variant="h6"
                gutterBottom
                sx={{
                  color: "white",
                  mb: 3,
                }}
              >
                –í–æ–ø—Ä–æ—Å ‚Ññ{currentQuestionIndex + 1}
              </Typography>

              {/* –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ */}
              <Typography
                variant="h5"
                component="h2"
                gutterBottom
                sx={{
                  fontWeight: "bold",
                  mb: 4,
                  color: "white",
                }}
              >
                {currentQuestion.text}
              </Typography>

              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
              {currentQuestion.image && (
                <Box
                  sx={{
                    display: "flex",
                    justifyContent: "center",
                    mb: 4,
                  }}
                >
                  <img
                    src={currentQuestion.image}
                    alt="–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ –≤–æ–ø—Ä–æ—Å—É"
                    style={{
                      maxWidth: "100%",
                      height: "auto",
                      borderRadius: "8px",
                      boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
                    }}
                  />
                </Box>
              )}

              {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ */}
              <FormControl component="fieldset" sx={{ width: "100%", mb: 4 }}>
                <RadioGroup
                  value={selectedAnswer}
                  onChange={handleAnswerChange}
                >
                  {currentQuestion.options.map((option) => (
                    <FormControlLabel
                      key={option.id}
                      value={option.id}
                      control={
                        <Radio
                          sx={{
                            py: 1,
                            color: "white",
                            "&.Mui-checked": {
                              color: "primary.main",
                            },
                          }}
                        />
                      }
                      label={
                        <Typography variant="body1" sx={{ color: "white" }}>
                          {option.text}
                        </Typography>
                      }
                      sx={{
                        border: "1px solid",
                        borderColor:
                          selectedAnswer === option.id
                            ? "primary.main"
                            : "rgba(255,255,255,0.3)",
                        borderRadius: "8px",
                        padding: "12px 16px",
                        marginBottom: "12px",
                        backgroundColor:
                          selectedAnswer === option.id
                            ? "rgba(25, 118, 210, 0.2)"
                            : "rgba(255, 255, 255, 0.1)",
                        transition: "all 0.2s ease",
                        "&:hover": {
                          borderColor: "primary.main",
                          backgroundColor: "rgba(25, 118, 210, 0.2)",
                        },
                      }}
                    />
                  ))}
                </RadioGroup>
              </FormControl>
            </Box>
          </Fade>
        ) : (
          // –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
          <Fade in={showFact} timeout={500}>
            <Box>
              <Typography
                variant="h5"
                component="h2"
                gutterBottom
                sx={{
                  fontWeight: "bold",
                  mb: 3,
                  color: "primary.main",
                  textAlign: "center",
                }}
              >
                üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
              </Typography>

              <Card
                sx={{
                  backgroundColor: "rgba(255, 255, 255, 0.1)",
                  border: "1px solid rgba(255, 255, 255, 0.2)",
                  mb: 4,
                }}
              >
                <CardContent>
                  {currentQuestion.fact.image && (
                    <Box
                      sx={{
                        display: "flex",
                        justifyContent: "center",
                        mb: 3,
                      }}
                    >
                      <img
                        src={currentQuestion.fact.image}
                        alt="–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–∫—Ç–∞"
                        style={{
                          maxWidth: "100%",
                          height: "auto",
                          borderRadius: "8px",
                        }}
                      />
                    </Box>
                  )}
                  <Typography
                    variant="body1"
                    sx={{
                      color: "white",
                      fontSize: "1.1rem",
                      lineHeight: 1.6,
                      textAlign: "center",
                    }}
                  >
                    {currentQuestion.fact.text}
                  </Typography>
                </CardContent>
              </Card>
            </Box>
          </Fade>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å */}
        <Box sx={{ display: "flex", justifyContent: "center" }}>
          <Button
            variant="outlined"
            size="large"
            onClick={handleNext}
            disabled={!showFact && !selectedAnswer}
            sx={{
              minWidth: "200px",
              py: 1.5,
              fontSize: "1.1rem",
              fontWeight: "500",
              color: "white",
              border: "solid 2px white",
              backgroundColor: showFact ? "secondary.main" : "primary.main",
              "&:hover": {
                backgroundColor: showFact ? "secondary.dark" : "primary.dark",
              },
            }}
          >
            {showFact
              ? isLastQuestion
                ? "–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                : "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
              : "–û—Ç–≤–µ—Ç–∏—Ç—å"}
          </Button>
        </Box>
      </Container>
    </Box>
  );
};

export default TestPage;
